#!/usr/bin/env node
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _main = require('./main');

var _forAllFiles = require('./for-all-files');

var _forAllFiles2 = _interopRequireDefault(_forAllFiles);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var yargs = require('yargs').usage('Usage: electron-compile --target [target-path] paths...').alias('t', 'target').describe('t', 'The target directory to write a cache directory to').alias('v', 'verbose').describe('v', 'Print verbose information').help('h').alias('h', 'help').epilog('Copyright 2015');

var argv = yargs.argv;

if (!argv._ || argv._.length < 1) {
  yargs.showHelp();
  process.exit(-1);
}

var sourceDirs = argv._;
var targetDir = argv.t || './cache';

var allSucceeded = true;
(0, _main.init)(targetDir, true);

_lodash2['default'].each(sourceDirs, function (sourceDir) {
  (0, _forAllFiles2['default'])(sourceDir, function (f) {
    if (argv.v) console.log('Compiling ' + f + '...');
    try {
      (0, _main.compile)(f);
    } catch (e) {
      console.error('Failed to compile ' + f + '!');
      console.error(e.message);

      if (argv.v) console.error(e.stack);
      console.error("\n");
      allSucceeded = false;
    }
  });
});

_fs2['default'].writeFileSync(_path2['default'].join(targetDir, 'settings.json'), JSON.stringify((0, _main.collectCompilerInformation)()));

process.exit(allSucceeded ? 0 : -1);