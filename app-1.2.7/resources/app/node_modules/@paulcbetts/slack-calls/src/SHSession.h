#ifndef __SHSESSION_H__
#define __SHSESSION_H__

#include <memory>
#include <mutex>
#include <nan.h>
#include <uv.h>
#include "webrtc/base/sigslot.h"

#include "JanusClient.h"
#include "JanusRoom.h"
#include "SHDeviceManager.h"
#include "SHSessionCore.h"

class SHSession;

void DoInvokeJSMethodCallback(uv_async_t* handle);
void DoOnDisconnectCallback(uv_async_t* handle);

class SHSession : public sigslot::has_slots<>,
                    public Nan::ObjectWrap, public Calls::SHSessionCoreObserver
{
public:    
    static void Init(v8::Handle<v8::Object> exports);
    static NAN_METHOD(New);
    static Nan::Persistent<v8::Function> constructor;

    // SHSessionCoreObserver functions
    void OnInvokeJSMethod(std::string method_json);
    void OnDisconnectSession();
    std::string GetResourceBasePath();

    // JS->Native methods
    // static NAN_GETTER(SessionId);
    static NAN_METHOD(InvokeNativeFunction);
    static NAN_METHOD(Destroy);

    bool IsDestroyed();

    static std::string winssb_resource_base_path;

protected:
    SHSession(Nan::Callback* invokeJsMethodCallback, Nan::Callback* onDisconnectCallback, std::string slack_version);
    virtual ~SHSession();

    void DoDestroy();

    uv_async_t *invokejs_async_handle_, *ondisconnect_async_handle_;

    Nan::Callback *invokeJsMethodCallback_, *onDisconnectCallback_;
    std::queue<std::string> js_methods_to_invoke_;
    std::mutex js_methods_to_invoke_mutex_;

    std::shared_ptr<Calls::SHSessionCore> session_core_;
    int timeoutErrorCount_;
    bool is_destroyed_;

    friend void DoInvokeJSMethodCallback(uv_async_t* handle);
    friend void DoOnDisconnectCallback(uv_async_t* handle);
};

#endif // __SHSESSION_H__
